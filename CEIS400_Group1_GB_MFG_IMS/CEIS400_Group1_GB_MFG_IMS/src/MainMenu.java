
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

 /*
 * Program Name: GB MFG Inventory Management System
 * Programmer's Name: Alfred Beam, Shelton Adams
 * Program Description: A GUI program that manages tool and material inventory.           
 *                      
 */
public class MainMenu extends javax.swing.JFrame {

    /**
     * Creates the IMS GUI
     */
    public MainMenu() {

        initComponents();
        // Setting the hint to display for Date Format and access level
        txtHireDate.setToolTipText("Format: YYYY/MM/DD.");
        txtAccessLevel.setToolTipText("Access Level must be either 'Admin', 'Staff', or 'Manager'.");

        // center the database window
        this.setLocationRelativeTo(null);

        // set the Work Order background color
        //this.getContentPane().setBackground(Color.LIGHT_GRAY);
        //this.getContentPane().setBackground(Color.WHITE);
        //This sets the JTabbedPane tabs to false! Meaning hide the tabs they will be greyed out. 
        for (int i = 1; i < mnuMain.getTabCount(); i++) {
            mnuMain.setEnabledAt(i, false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        mnuMain = new javax.swing.JTabbedPane();
        pnlMain = new javax.swing.JPanel();
        btnLogin = new javax.swing.JButton();
        lblUserID = new javax.swing.JLabel();
        txtUserID = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        pswdPassword = new javax.swing.JPasswordField();
        pnlEmployee = new javax.swing.JPanel();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        lblPhoneNumber = new javax.swing.JLabel();
        txtPhoneNumber = new javax.swing.JTextField();
        txtHireDate = new javax.swing.JTextField();
        lblHireDate = new javax.swing.JLabel();
        lblJobTitle = new javax.swing.JLabel();
        txtJobTitle = new javax.swing.JTextField();
        txtDepartment = new javax.swing.JTextField();
        lblDepartment = new javax.swing.JLabel();
        lblSalary = new javax.swing.JLabel();
        txtSalary = new javax.swing.JTextField();
        lblAccessLevel = new javax.swing.JLabel();
        txtAccessLevel = new javax.swing.JTextField();
        lblUserName = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        lblPasswordHash = new javax.swing.JLabel();
        btnAddEmployee = new javax.swing.JButton();
        btnDisplayEmployee = new javax.swing.JButton();
        btnDeleteEmployee = new javax.swing.JButton();
        scrEmployeeTable = new javax.swing.JScrollPane();
        tblEmployeeTable = new javax.swing.JTable();
        lblEmployeeID = new javax.swing.JLabel();
        txtEmployeeID = new javax.swing.JTextField();
        pswdPasswordHash = new javax.swing.JPasswordField();
        pnlWorkOrder = new javax.swing.JPanel();
        lblWorkOrder = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        lblStreet1 = new javax.swing.JLabel();
        txtWorkOrderNumber = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        lblCompanyName = new javax.swing.JLabel();
        lblStreet = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        pnlTools = new javax.swing.JPanel();
        btnDisplayToolList = new javax.swing.JButton();
        btnAddTool = new javax.swing.JButton();
        txtToolName = new javax.swing.JTextField();
        lblToolName = new javax.swing.JLabel();
        txtToolSerialNumber = new javax.swing.JTextField();
        lblToolSerialNumber = new javax.swing.JLabel();
        txtToolValue = new javax.swing.JTextField();
        lblToolValue = new javax.swing.JLabel();
        scrToolTable = new javax.swing.JScrollPane();
        tblToolTable = new javax.swing.JTable();
        lblToolID = new javax.swing.JLabel();
        txtToolID = new javax.swing.JTextField();
        btnDeleteToo1 = new javax.swing.JButton();
        pnlMaterials = new javax.swing.JPanel();
        btnDisplayMaterialList = new javax.swing.JButton();
        lblMaterialName = new javax.swing.JLabel();
        txtMaterialName = new javax.swing.JTextField();
        lblMaterialDescription = new javax.swing.JLabel();
        txtMaterialDescription = new javax.swing.JTextField();
        lblMaterialValue = new javax.swing.JLabel();
        txtMaterialValue = new javax.swing.JTextField();
        lblMaterialVendor = new javax.swing.JLabel();
        txtMaterialVendor = new javax.swing.JTextField();
        lblMaterialID = new javax.swing.JLabel();
        txtMaterialID = new javax.swing.JTextField();
        btnAddMaterial = new javax.swing.JButton();
        btnDeleteMaterialList = new javax.swing.JButton();
        scrMaterialToolTable = new javax.swing.JScrollPane();
        tblMaterialTable = new javax.swing.JTable();
        mnbMain = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniNewWorkOrder = new javax.swing.JMenuItem();
        mniOpen = new javax.swing.JMenuItem();
        mniExit = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        mniClear = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GB Manufacturing Inventory Management System");

        btnLogin.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lblUserID.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblUserID.setText("Username:");

        txtUserID.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtUserID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserIDActionPerformed(evt);
            }
        });

        lblPassword.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblPassword.setText("Password:");

        btnLogout.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap(262, Short.MAX_VALUE)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblUserID)
                    .addComponent(lblPassword)
                    .addComponent(pswdPassword)
                    .addComponent(txtUserID)
                    .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                .addGap(244, 244, 244))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(lblUserID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(lblPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pswdPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLogin)
                .addGap(18, 18, 18)
                .addComponent(btnLogout)
                .addContainerGap(304, Short.MAX_VALUE))
        );

        mnuMain.addTab("Main Menu", pnlMain);

        lblFirstName.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblFirstName.setText("First Name:");

        txtFirstName.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFirstNameActionPerformed(evt);
            }
        });

        lblLastName.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblLastName.setText("Last Name:");

        txtLastName.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastNameActionPerformed(evt);
            }
        });

        txtEmail.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        lblEmail.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblEmail.setText("E-Mail:");

        lblPhoneNumber.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblPhoneNumber.setText("Phone Number:");

        txtPhoneNumber.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtPhoneNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhoneNumberActionPerformed(evt);
            }
        });

        txtHireDate.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtHireDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHireDateActionPerformed(evt);
            }
        });

        lblHireDate.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblHireDate.setText("Hire Date:");

        lblJobTitle.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblJobTitle.setText("Job Title:");

        txtJobTitle.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtJobTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtJobTitleActionPerformed(evt);
            }
        });

        txtDepartment.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepartmentActionPerformed(evt);
            }
        });

        lblDepartment.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblDepartment.setText("Department:");

        lblSalary.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblSalary.setText("Salary:");

        txtSalary.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalaryActionPerformed(evt);
            }
        });

        lblAccessLevel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblAccessLevel.setText("Access Level:");

        txtAccessLevel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtAccessLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAccessLevelActionPerformed(evt);
            }
        });

        lblUserName.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblUserName.setText("User Name:");

        txtUserName.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserNameActionPerformed(evt);
            }
        });

        lblPasswordHash.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblPasswordHash.setText("Password:");

        btnAddEmployee.setText("Add Employee");
        btnAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEmployeeActionPerformed(evt);
            }
        });

        btnDisplayEmployee.setText("Display Employees");
        btnDisplayEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayEmployeeActionPerformed(evt);
            }
        });

        btnDeleteEmployee.setText("Delete Employee");
        btnDeleteEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteEmployeeActionPerformed(evt);
            }
        });

        tblEmployeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrEmployeeTable.setViewportView(tblEmployeeTable);

        lblEmployeeID.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblEmployeeID.setText("Employee ID:");

        txtEmployeeID.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtEmployeeID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmployeeIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEmployeeLayout = new javax.swing.GroupLayout(pnlEmployee);
        pnlEmployee.setLayout(pnlEmployeeLayout);
        pnlEmployeeLayout.setHorizontalGroup(
            pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEmployeeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrEmployeeTable)
                    .addGroup(pnlEmployeeLayout.createSequentialGroup()
                        .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEmployeeLayout.createSequentialGroup()
                                .addComponent(btnAddEmployee)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDisplayEmployee))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEmployeeLayout.createSequentialGroup()
                                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEmployeeLayout.createSequentialGroup()
                                            .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblLastName)
                                                .addComponent(lblFirstName)
                                                .addComponent(lblEmail)
                                                .addComponent(lblPhoneNumber)
                                                .addComponent(lblHireDate))
                                            .addGap(18, 18, 18))
                                        .addGroup(pnlEmployeeLayout.createSequentialGroup()
                                            .addComponent(lblJobTitle)
                                            .addGap(47, 47, 47)))
                                    .addGroup(pnlEmployeeLayout.createSequentialGroup()
                                        .addComponent(lblDepartment)
                                        .addGap(32, 32, 32)))
                                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtJobTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHireDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAccessLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pswdPasswordHash))
                                .addGap(26, 26, 26)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
                        .addComponent(lblEmployeeID)
                        .addGap(18, 18, 18)
                        .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDeleteEmployee)
                            .addComponent(txtEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlEmployeeLayout.createSequentialGroup()
                        .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSalary)
                            .addComponent(lblUserName)
                            .addComponent(lblAccessLevel)
                            .addComponent(lblPasswordHash))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlEmployeeLayout.setVerticalGroup(
            pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEmployeeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmployeeID)
                    .addComponent(txtEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEmployeeLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLastName)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmail)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlEmployeeLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteEmployee)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhoneNumber)
                    .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHireDate)
                    .addComponent(txtHireDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblJobTitle)
                    .addComponent(txtJobTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDepartment)
                    .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSalary)
                    .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAccessLevel)
                    .addComponent(txtAccessLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPasswordHash)
                    .addComponent(pswdPasswordHash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddEmployee)
                    .addComponent(btnDisplayEmployee))
                .addGap(18, 18, 18)
                .addComponent(scrEmployeeTable, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addContainerGap())
        );

        mnuMain.addTab("Employee", pnlEmployee);

        lblWorkOrder.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblWorkOrder.setForeground(new java.awt.Color(0, 0, 255));
        lblWorkOrder.setText("WORK ORDER");

        lblPhone.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblPhone.setText("Phone: 1-800-555-1212");

        lblStreet1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblStreet1.setText("Work Order #:");

        txtWorkOrderNumber.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        txtDate.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        lblDate.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblDate.setText("Date:");

        lblCompanyName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblCompanyName.setText("GB Manufacturing");

        lblStreet.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblStreet.setText("135 Liberty Ave.");

        lblCity.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblCity.setText("Brooklyn, NY 11212");

        javax.swing.GroupLayout pnlWorkOrderLayout = new javax.swing.GroupLayout(pnlWorkOrder);
        pnlWorkOrder.setLayout(pnlWorkOrderLayout);
        pnlWorkOrderLayout.setHorizontalGroup(
            pnlWorkOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlWorkOrderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlWorkOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCompanyName)
                    .addComponent(lblStreet)
                    .addComponent(lblCity)
                    .addComponent(lblPhone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 367, Short.MAX_VALUE)
                .addGroup(pnlWorkOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblWorkOrder, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlWorkOrderLayout.createSequentialGroup()
                        .addComponent(lblStreet1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWorkOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlWorkOrderLayout.createSequentialGroup()
                        .addComponent(lblDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlWorkOrderLayout.setVerticalGroup(
            pnlWorkOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlWorkOrderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlWorkOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlWorkOrderLayout.createSequentialGroup()
                        .addComponent(lblCompanyName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStreet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPhone))
                    .addGroup(pnlWorkOrderLayout.createSequentialGroup()
                        .addComponent(lblWorkOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlWorkOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtWorkOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStreet1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlWorkOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDate))))
                .addContainerGap(507, Short.MAX_VALUE))
        );

        mnuMain.addTab("Work Order", pnlWorkOrder);

        btnDisplayToolList.setText("Display Tools");
        btnDisplayToolList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayToolListActionPerformed(evt);
            }
        });

        btnAddTool.setText("Add Tool");
        btnAddTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToolActionPerformed(evt);
            }
        });

        txtToolName.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtToolName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtToolNameActionPerformed(evt);
            }
        });

        lblToolName.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblToolName.setText("Tool Name:");

        txtToolSerialNumber.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        lblToolSerialNumber.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblToolSerialNumber.setText("Tool Serial Number:");

        txtToolValue.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        lblToolValue.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblToolValue.setText("Tool Value:");

        tblToolTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrToolTable.setViewportView(tblToolTable);

        lblToolID.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblToolID.setText("Tool ID:");

        txtToolID.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtToolID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtToolIDActionPerformed(evt);
            }
        });

        btnDeleteToo1.setText("Delete Tool");
        btnDeleteToo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteToo1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlToolsLayout = new javax.swing.GroupLayout(pnlTools);
        pnlTools.setLayout(pnlToolsLayout);
        pnlToolsLayout.setHorizontalGroup(
            pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlToolsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrToolTable)
                    .addGroup(pnlToolsLayout.createSequentialGroup()
                        .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlToolsLayout.createSequentialGroup()
                                .addComponent(lblToolName)
                                .addGap(46, 46, 46)
                                .addComponent(txtToolName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlToolsLayout.createSequentialGroup()
                                .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblToolSerialNumber)
                                    .addComponent(lblToolValue))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtToolValue, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtToolSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlToolsLayout.createSequentialGroup()
                                .addComponent(btnAddTool, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDisplayToolList)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 187, Short.MAX_VALUE)
                        .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlToolsLayout.createSequentialGroup()
                                .addComponent(lblToolID)
                                .addGap(46, 46, 46)
                                .addComponent(txtToolID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnDeleteToo1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        pnlToolsLayout.setVerticalGroup(
            pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlToolsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblToolID)
                        .addComponent(txtToolID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblToolName)
                        .addComponent(txtToolName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblToolSerialNumber)
                    .addComponent(txtToolSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblToolValue)
                    .addComponent(txtToolValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddTool)
                    .addComponent(btnDisplayToolList)
                    .addComponent(btnDeleteToo1))
                .addGap(18, 18, 18)
                .addComponent(scrToolTable, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE))
        );

        mnuMain.addTab("Tools", pnlTools);

        btnDisplayMaterialList.setText("Display Materials");
        btnDisplayMaterialList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayMaterialListActionPerformed(evt);
            }
        });

        lblMaterialName.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblMaterialName.setText("Material Name:");

        txtMaterialName.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMaterialName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaterialNameActionPerformed(evt);
            }
        });

        lblMaterialDescription.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblMaterialDescription.setText("Material Description:");

        txtMaterialDescription.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMaterialDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaterialDescriptionActionPerformed(evt);
            }
        });

        lblMaterialValue.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblMaterialValue.setText("Material Value:");

        txtMaterialValue.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMaterialValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaterialValueActionPerformed(evt);
            }
        });

        lblMaterialVendor.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblMaterialVendor.setText("Material Vendor:");

        txtMaterialVendor.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMaterialVendor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaterialVendorActionPerformed(evt);
            }
        });

        lblMaterialID.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblMaterialID.setText("Material ID:");

        txtMaterialID.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMaterialID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaterialIDActionPerformed(evt);
            }
        });

        btnAddMaterial.setText("Add Material");
        btnAddMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMaterialActionPerformed(evt);
            }
        });

        btnDeleteMaterialList.setText("Delete Material");
        btnDeleteMaterialList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMaterialListActionPerformed(evt);
            }
        });

        tblMaterialTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrMaterialToolTable.setViewportView(tblMaterialTable);

        javax.swing.GroupLayout pnlMaterialsLayout = new javax.swing.GroupLayout(pnlMaterials);
        pnlMaterials.setLayout(pnlMaterialsLayout);
        pnlMaterialsLayout.setHorizontalGroup(
            pnlMaterialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMaterialsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMaterialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMaterialsLayout.createSequentialGroup()
                        .addGroup(pnlMaterialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlMaterialsLayout.createSequentialGroup()
                                .addComponent(btnAddMaterial)
                                .addGap(95, 95, 95)
                                .addComponent(btnDisplayMaterialList))
                            .addGroup(pnlMaterialsLayout.createSequentialGroup()
                                .addComponent(lblMaterialName)
                                .addGap(75, 75, 75)
                                .addComponent(txtMaterialName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMaterialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlMaterialsLayout.createSequentialGroup()
                                    .addComponent(lblMaterialVendor)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtMaterialVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlMaterialsLayout.createSequentialGroup()
                                    .addComponent(lblMaterialValue)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtMaterialValue, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlMaterialsLayout.createSequentialGroup()
                                    .addComponent(lblMaterialDescription)
                                    .addGap(46, 46, 46)
                                    .addComponent(txtMaterialDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                        .addGroup(pnlMaterialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMaterialsLayout.createSequentialGroup()
                                .addComponent(lblMaterialID)
                                .addGap(46, 46, 46)
                                .addComponent(txtMaterialID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnDeleteMaterialList))
                        .addGap(14, 14, 14))
                    .addGroup(pnlMaterialsLayout.createSequentialGroup()
                        .addComponent(scrMaterialToolTable)
                        .addContainerGap())))
        );
        pnlMaterialsLayout.setVerticalGroup(
            pnlMaterialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMaterialsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMaterialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaterialName)
                    .addComponent(txtMaterialName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaterialID)
                    .addComponent(txtMaterialID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaterialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaterialDescription)
                    .addComponent(txtMaterialDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaterialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaterialValue)
                    .addComponent(txtMaterialValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaterialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaterialVendor)
                    .addComponent(txtMaterialVendor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMaterialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddMaterial)
                    .addComponent(btnDisplayMaterialList)
                    .addComponent(btnDeleteMaterialList))
                .addGap(18, 18, 18)
                .addComponent(scrMaterialToolTable, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addContainerGap())
        );

        mnuMain.addTab("Materials", pnlMaterials);

        mnuFile.setText("File");

        mniNewWorkOrder.setText("New");
        mniNewWorkOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniNewWorkOrderActionPerformed(evt);
            }
        });
        mnuFile.add(mniNewWorkOrder);

        mniOpen.setText("Open");
        mniOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenActionPerformed(evt);
            }
        });
        mnuFile.add(mniOpen);

        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        mnuFile.add(mniExit);

        mnbMain.add(mnuFile);

        mnuEdit.setText("Edit");

        mniClear.setText("Clear");
        mniClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniClearActionPerformed(evt);
            }
        });
        mnuEdit.add(mniClear);

        mnbMain.add(mnuEdit);

        setJMenuBar(mnbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mnuMain, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mnuMain, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mniExitActionPerformed
    {//GEN-HEADEREND:event_mniExitActionPerformed
        // exit the application
        System.exit(0);
    }//GEN-LAST:event_mniExitActionPerformed

    private void mniNewWorkOrderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mniNewWorkOrderActionPerformed
    {//GEN-HEADEREND:event_mniNewWorkOrderActionPerformed
        // create a new work order
        JOptionPane.showMessageDialog(this, "Method is not complete.");
        // set the current window to invisible
        //this.setVisible(false);
        // create the new work order window
        //new WorkOrder().setVisible(true);

    }//GEN-LAST:event_mniNewWorkOrderActionPerformed

    private void mniClearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mniClearActionPerformed
    {//GEN-HEADEREND:event_mniClearActionPerformed
        // clear the current work order fields
        JOptionPane.showMessageDialog(this, "Method is not complete.");
    }//GEN-LAST:event_mniClearActionPerformed

    private void mniOpenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mniOpenActionPerformed
    {//GEN-HEADEREND:event_mniOpenActionPerformed
        // open an existing work order
        JOptionPane.showMessageDialog(this, "Method is not complete.");
    }//GEN-LAST:event_mniOpenActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLoginActionPerformed
    {//GEN-HEADEREND:event_btnLoginActionPerformed
        // Get the entered username and password
        String username = txtUserID.getText().trim(); // Trim to remove any extra spaces
        String password = pswdPassword.getText().trim(); // Trim to remove any extra spaces

        // Check if either field is blank
        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter both username and password.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return; // Exit the method if fields are empty
        }

        // Ensure employeeDB is initialized
        EmployeeDB employeeDB = new EmployeeDB();

        // Authenticate Employee
        if (employeeDB.authenticateEmployee(username, password)) {
            JOptionPane.showMessageDialog(null, "Login Successful", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Enable all tabs (except Main Menu which is index 0)
            for (int i = 1; i < mnuMain.getTabCount(); i++) {
                mnuMain.setEnabledAt(i, true);

                // Clear the information
                txtUserID.setText("");
                pswdPassword.setText("");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Login Failed! Invalid credentials.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLogoutActionPerformed
    {//GEN-HEADEREND:event_btnLogoutActionPerformed
        // Disable all tabs except Main Menu
        for (int i = 1; i < mnuMain.getTabCount(); i++) {
            mnuMain.setEnabledAt(i, false);
        }

        // Clear user session (if applicable)
        txtUserID.setText("");
        pswdPassword.setText("");

        // Return to Main Menu tab
        mnuMain.setSelectedIndex(0);

        JOptionPane.showMessageDialog(null, "Logged out successfully!");
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnDisplayMaterialListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDisplayMaterialListActionPerformed
    {//GEN-HEADEREND:event_btnDisplayMaterialListActionPerformed
        // Loads material list from database.
        displayMaterial();
    }//GEN-LAST:event_btnDisplayMaterialListActionPerformed

    private void btnDisplayToolListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDisplayToolListActionPerformed
    {//GEN-HEADEREND:event_btnDisplayToolListActionPerformed
        displayTool();
    }//GEN-LAST:event_btnDisplayToolListActionPerformed

    private void btnAddToolActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddToolActionPerformed
    {//GEN-HEADEREND:event_btnAddToolActionPerformed
        if (addTool() == false) {
            return;
        };
        displayTool();
    }//GEN-LAST:event_btnAddToolActionPerformed

    private void txtToolNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtToolNameActionPerformed
    {//GEN-HEADEREND:event_txtToolNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToolNameActionPerformed

    private void txtToolIDActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtToolIDActionPerformed
    {//GEN-HEADEREND:event_txtToolIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToolIDActionPerformed

    private void btnDeleteToo1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDeleteToo1ActionPerformed
    {//GEN-HEADEREND:event_btnDeleteToo1ActionPerformed
        removeTool();
        displayTool();
    }//GEN-LAST:event_btnDeleteToo1ActionPerformed

    private void txtUserIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserIDActionPerformed

    private void txtFirstNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtFirstNameActionPerformed
    {//GEN-HEADEREND:event_txtFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFirstNameActionPerformed

    private void txtLastNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtLastNameActionPerformed
    {//GEN-HEADEREND:event_txtLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastNameActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtEmailActionPerformed
    {//GEN-HEADEREND:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtPhoneNumberActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtPhoneNumberActionPerformed
    {//GEN-HEADEREND:event_txtPhoneNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneNumberActionPerformed

    private void txtHireDateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtHireDateActionPerformed
    {//GEN-HEADEREND:event_txtHireDateActionPerformed

    }//GEN-LAST:event_txtHireDateActionPerformed

    private void txtJobTitleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtJobTitleActionPerformed
    {//GEN-HEADEREND:event_txtJobTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtJobTitleActionPerformed

    private void txtDepartmentActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtDepartmentActionPerformed
    {//GEN-HEADEREND:event_txtDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepartmentActionPerformed

    private void txtSalaryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtSalaryActionPerformed
    {//GEN-HEADEREND:event_txtSalaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalaryActionPerformed

    private void txtAccessLevelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtAccessLevelActionPerformed
    {//GEN-HEADEREND:event_txtAccessLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAccessLevelActionPerformed

    private void txtUserNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtUserNameActionPerformed
    {//GEN-HEADEREND:event_txtUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserNameActionPerformed

    private void btnAddEmployeeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddEmployeeActionPerformed
    {//GEN-HEADEREND:event_btnAddEmployeeActionPerformed

        addEmployee();

    }//GEN-LAST:event_btnAddEmployeeActionPerformed

    private void btnDisplayEmployeeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDisplayEmployeeActionPerformed
    {//GEN-HEADEREND:event_btnDisplayEmployeeActionPerformed
        displayEmployees();
    }//GEN-LAST:event_btnDisplayEmployeeActionPerformed

    private void btnDeleteEmployeeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDeleteEmployeeActionPerformed
    {//GEN-HEADEREND:event_btnDeleteEmployeeActionPerformed
        // TODO add your handling code here:
        deleteEmployee();
    }//GEN-LAST:event_btnDeleteEmployeeActionPerformed

    private void txtEmployeeIDActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtEmployeeIDActionPerformed
    {//GEN-HEADEREND:event_txtEmployeeIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmployeeIDActionPerformed

    private void txtMaterialNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtMaterialNameActionPerformed
    {//GEN-HEADEREND:event_txtMaterialNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaterialNameActionPerformed

    private void txtMaterialDescriptionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtMaterialDescriptionActionPerformed
    {//GEN-HEADEREND:event_txtMaterialDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaterialDescriptionActionPerformed

    private void txtMaterialValueActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtMaterialValueActionPerformed
    {//GEN-HEADEREND:event_txtMaterialValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaterialValueActionPerformed

    private void txtMaterialVendorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtMaterialVendorActionPerformed
    {//GEN-HEADEREND:event_txtMaterialVendorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaterialVendorActionPerformed

    private void txtMaterialIDActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtMaterialIDActionPerformed
    {//GEN-HEADEREND:event_txtMaterialIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaterialIDActionPerformed

    private void btnAddMaterialActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddMaterialActionPerformed
    {//GEN-HEADEREND:event_btnAddMaterialActionPerformed
        // adds a material to the database
        if (addMaterial() == false) {
            return;
        };
        displayMaterial();
    }//GEN-LAST:event_btnAddMaterialActionPerformed

    private void btnDeleteMaterialListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDeleteMaterialListActionPerformed
    {//GEN-HEADEREND:event_btnDeleteMaterialListActionPerformed
        // deletes a material from the database
        removeMaterial();
        displayMaterial();
    }//GEN-LAST:event_btnDeleteMaterialListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEmployee;
    private javax.swing.JButton btnAddMaterial;
    private javax.swing.JButton btnAddTool;
    private javax.swing.JButton btnDeleteEmployee;
    private javax.swing.JButton btnDeleteMaterialList;
    private javax.swing.JButton btnDeleteToo1;
    private javax.swing.JButton btnDisplayEmployee;
    private javax.swing.JButton btnDisplayMaterialList;
    private javax.swing.JButton btnDisplayToolList;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblAccessLevel;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCompanyName;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDepartment;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEmployeeID;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblHireDate;
    private javax.swing.JLabel lblJobTitle;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblMaterialDescription;
    private javax.swing.JLabel lblMaterialID;
    private javax.swing.JLabel lblMaterialName;
    private javax.swing.JLabel lblMaterialValue;
    private javax.swing.JLabel lblMaterialVendor;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPasswordHash;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JLabel lblSalary;
    private javax.swing.JLabel lblStreet;
    private javax.swing.JLabel lblStreet1;
    private javax.swing.JLabel lblToolID;
    private javax.swing.JLabel lblToolName;
    private javax.swing.JLabel lblToolSerialNumber;
    private javax.swing.JLabel lblToolValue;
    private javax.swing.JLabel lblUserID;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JLabel lblWorkOrder;
    private javax.swing.JMenuBar mnbMain;
    private javax.swing.JMenuItem mniClear;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniNewWorkOrder;
    private javax.swing.JMenuItem mniOpen;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JTabbedPane mnuMain;
    private javax.swing.JPanel pnlEmployee;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlMaterials;
    private javax.swing.JPanel pnlTools;
    private javax.swing.JPanel pnlWorkOrder;
    private javax.swing.JPasswordField pswdPassword;
    private javax.swing.JPasswordField pswdPasswordHash;
    private javax.swing.JScrollPane scrEmployeeTable;
    private javax.swing.JScrollPane scrMaterialToolTable;
    private javax.swing.JScrollPane scrToolTable;
    private javax.swing.JTable tblEmployeeTable;
    private javax.swing.JTable tblMaterialTable;
    private javax.swing.JTable tblToolTable;
    private javax.swing.JTextField txtAccessLevel;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtDepartment;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmployeeID;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtHireDate;
    private javax.swing.JTextField txtJobTitle;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtMaterialDescription;
    private javax.swing.JTextField txtMaterialID;
    private javax.swing.JTextField txtMaterialName;
    private javax.swing.JTextField txtMaterialValue;
    private javax.swing.JTextField txtMaterialVendor;
    private javax.swing.JTextField txtPhoneNumber;
    private javax.swing.JTextField txtSalary;
    private javax.swing.JTextField txtToolID;
    private javax.swing.JTextField txtToolName;
    private javax.swing.JTextField txtToolSerialNumber;
    private javax.swing.JTextField txtToolValue;
    private javax.swing.JTextField txtUserID;
    private javax.swing.JTextField txtUserName;
    private javax.swing.JTextField txtWorkOrderNumber;
    // End of variables declaration//GEN-END:variables

    // add materials to the database
    private boolean addMaterial() {
        // get the material information
        String materialName = txtMaterialName.getText();
        String materialDescription = txtMaterialDescription.getText();
        String value = txtMaterialValue.getText();
        String materialVendor = txtMaterialVendor.getText();

        // make sure we have a name for the material
        if (materialName.isBlank()) {
            JOptionPane.showMessageDialog(this, "Enter a Material Name",
                    "Name Error", JOptionPane.ERROR_MESSAGE);
            txtMaterialName.requestFocusInWindow();
            return false;
        }
        // make sure we have a description for the material
        if (materialDescription.isBlank()) {
            JOptionPane.showMessageDialog(this, "Enter a Material Description",
                    "Name Error", JOptionPane.ERROR_MESSAGE);
            txtMaterialDescription.requestFocusInWindow();
            return false;
        }
        // make sure we have a value for the material
        if (value.isBlank()) {
            JOptionPane.showMessageDialog(this, "Enter a Material Value",
                    "Name Error", JOptionPane.ERROR_MESSAGE);
            txtMaterialValue.requestFocusInWindow();
            return false;
        }
        // make sure the material value is a number
        try
        {
            double materialValue = Double.parseDouble(txtMaterialValue.getText());
            
        } catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this, "Material Value must be a number",
                    "Value Error", JOptionPane.ERROR_MESSAGE);
            txtMaterialValue.requestFocusInWindow();
            return false;
        }        
        // make sure we have a vendor for the material
        if (materialVendor.isBlank()) {
            JOptionPane.showMessageDialog(this, "Enter a Material Vendor",
                    "Name Error", JOptionPane.ERROR_MESSAGE);
            txtMaterialVendor.requestFocusInWindow();
            return false;
        }       
        
        // parse the text field into a double
        double materialValue = Double.parseDouble(txtMaterialValue.getText());
        // create the material object
        Material material = new Material(0, materialName, materialDescription, materialValue, materialVendor);

        // add the material object to the database
        MaterialDB db = new MaterialDB();

        try {
            db.addMaterial(material);
            //JOptionPane.showMessageDialog(this, "Record was returned to the database.");
            // clear the form
            txtMaterialName.setText("");
            txtMaterialDescription.setText("");
            txtMaterialValue.setText("");
            txtMaterialVendor.setText("");
            // put the curser back on the name field
            txtMaterialName.requestFocus();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error. Database driver not found.", "Driver not found.", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database Error:" + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
        return true;
    }

    private void displayMaterial() {
        // Loads material list from database.
        //================================================
        // display records on a JTable
        //================================================
        // show the headings
        DefaultTableModel tblModel = new DefaultTableModel();
        tblMaterialTable.setModel(tblModel);

        String[] colTitles
                = {
                    "ID", "Name", "Description", "Value", "Vendor"
                };
        tblModel.setColumnIdentifiers(colTitles);

        // read the material list
        MaterialDB db = new MaterialDB();
        try {
            ArrayList<Material> records = db.getMaterialList();
            //DecimalFormat fmt2 = new DecimalFormat("0.0");
            for (int i = 0; i < records.size(); i++) {
                Material material = records.get(i);

                Object[] row
                        = {
                            material.getMaterialID(), material.getMaterialName(), material.getMaterialDescription(), material.getMaterialValue(), material.getMaterialVendor()
                        };

                tblModel.addRow(row);
            }

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error. Database driver not found.", "Driver not found.", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database Error:" + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void removeMaterial() {
        // gets the value from the Material ID field
        String value = txtMaterialID.getText();

        // check to see if the MaterialID field is blank
        if (value == null || value.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Material ID to delete");
        } else {
            // run the delete material method in the MaterialDB class
            try {
                MaterialDB db = new MaterialDB();
                db.deleteMaterial(value);

            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Error. Database driver not found.", "Driver not found.", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database Error:" + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            }

        }

    }

    // add tools to the database
    private boolean addTool() {
        // get the tool information
        String toolName = txtToolName.getText();
        String toolSerialNumber = txtToolSerialNumber.getText();
        String value = txtToolValue.getText();

        // make sure we have a name for the tool
        if (toolName.isBlank()) {
            JOptionPane.showMessageDialog(this, "Enter a Tool Name",
                    "Name Error", JOptionPane.ERROR_MESSAGE);
            txtToolName.requestFocusInWindow();
            return false;
        }
        // make sure we have a serial number for the tool
        if (toolSerialNumber.isBlank()) {
            JOptionPane.showMessageDialog(this, "Enter a Tool Serial Number",
                    "Name Error", JOptionPane.ERROR_MESSAGE);
            txtToolSerialNumber.requestFocusInWindow();
            return false;
        }
        // make sure we have a value for the tool
        if (value.isBlank()) {
            JOptionPane.showMessageDialog(this, "Enter a Tool Value",
                    "Name Error", JOptionPane.ERROR_MESSAGE);
            txtToolValue.requestFocusInWindow();
            return false;
        }
        // make sure the material value is a number
        try
        {
            double toolValue = Double.parseDouble(txtToolValue.getText());
            
        } catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this, "Tool Value must be a number",
                    "Value Error", JOptionPane.ERROR_MESSAGE);
            txtToolValue.requestFocusInWindow();
            return false;
        }
        // parse the tool value text field into a double
        double toolValue = Double.parseDouble(txtToolValue.getText());

        // create the tool object
        Tool tool = new Tool(0, toolName, toolSerialNumber, toolValue);

        // add the tool object to the database
        ToolDB db = new ToolDB();

        try {
            db.addTool(tool);
            //JOptionPane.showMessageDialog(this, "Record was returned to the database.");
            // clear the form
            txtToolName.setText("");
            txtToolSerialNumber.setText("");
            txtToolValue.setText("");
            // put the curser back on the name field
            txtToolName.requestFocus();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error. Database driver not found.", "Driver not found.", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database Error:" + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
        return true;
    }

// display tools in the database
    private void displayTool() {
        // Loads tool list from database.
        //================================================
        // display records on a JTable
        //================================================
        // show the headings
        DefaultTableModel tblModel = new DefaultTableModel();
        tblToolTable.setModel(tblModel);

        String[] colTitles
                = {
                    "ID", "Name", "Serial Number", "Value"
                };
        tblModel.setColumnIdentifiers(colTitles);

        // read the tool list
        ToolDB db = new ToolDB();
        try {
            ArrayList<Tool> records = db.getToolList();
            //DecimalFormat fmt2 = new DecimalFormat("0.0");
            for (int i = 0; i < records.size(); i++) {
                Tool tool = records.get(i);

                Object[] row
                        = {
                            tool.getToolID(), tool.getToolName(), tool.getToolSerialNumber(), tool.getToolValue()
                        };

                tblModel.addRow(row);
            }

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error. Database driver not found.", "Driver not found.", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database Error:" + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    // deletes tools from the database
    private void removeTool() {

        // gets the value from the Tool ID field
        String value = txtToolID.getText();

        // check to see if the ToolID field is blank
        if (value == null || value.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Tool ID to delete");
        } else {
            // run the delete tool method in the ToolDB class
            try {
                ToolDB db = new ToolDB();
                db.deleteTool(value);

            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Error. Database driver not found.", "Driver not found.", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database Error:" + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            }

        }

    }

    private void addEmployee() {

        // Gather the Employees information
        String empID = txtEmployeeID.getText();
        String fName = txtFirstName.getText();
        String lName = txtLastName.getText();
        String email = txtEmail.getText();
        String phoneNumber = txtPhoneNumber.getText();
        String hireDate = txtHireDate.getText();
        String jobTitle = txtJobTitle.getText();
        String department = txtDepartment.getText();
        String salaryText = txtSalary.getText();
        String accessLevel = txtAccessLevel.getText();
        String userName = txtUserName.getText();
        String password = pswdPasswordHash.getText();

        // Validate that no fields are left empty
        if (fName.isEmpty() || lName.isEmpty() || email.isEmpty() || phoneNumber.isEmpty()
                || hireDate.isEmpty() || jobTitle.isEmpty() || department.isEmpty() || salaryText.isEmpty()
                || accessLevel.isEmpty() || userName.isEmpty() || password.isEmpty()) {

            JOptionPane.showMessageDialog(this, "All employee fields must be filled out.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate and convert the salaryText into a double
        double salary;
        try {
            salary = Double.parseDouble(salaryText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid salary format.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate access level
        if (!accessLevel.equalsIgnoreCase("Admin") && !accessLevel.equalsIgnoreCase("Staff") && !accessLevel.equalsIgnoreCase("Manager")) {
            JOptionPane.showMessageDialog(this, "Access Level must be either 'Admin', 'Staff', or 'Manager'.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate Hire Date Format (YYYY/MM/DD)
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        dateFormat.setLenient(false); // Enforce strict date validation

        try {
            dateFormat.parse(hireDate); // Parses and validates date
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid Hire Date. Ensure format is YYYY/MM/DD and date is valid.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // create the employee object
        Employee newEmployee = new Employee(empID, fName, lName, email, phoneNumber, hireDate, jobTitle,
                department, salary, accessLevel, userName, password); // Ensure password is hashed before storing

        // add the material object to the database
        EmployeeDB employeeDB = new EmployeeDB();

        employeeDB.addEmployee(newEmployee);

        JOptionPane.showMessageDialog(this, "Employee Record was returned to the database.");

        // clear the form
        txtFirstName.setText("");
        txtLastName.setText("");
        txtEmail.setText("");
        txtPhoneNumber.setText("");
        txtHireDate.setText("");
        txtJobTitle.setText("");
        txtDepartment.setText("");
        txtSalary.setText("");
        txtAccessLevel.setText("");
        txtUserName.setText("");
        pswdPasswordHash.setText("");
        // put the curser back on the name field
        txtFirstName.requestFocus();

    }

    private void displayEmployees() {
        DefaultTableModel etblModel = new DefaultTableModel();
        tblEmployeeTable.setModel(etblModel);

        String[] colTitles
                = {
                    "Employee ID", "First Name", "Last Name", "Email", "Phone Number", "Hire Date", "Job Title", "Department",
                    "Salary", "Access Level", "Username", "Password"
                };
        etblModel.setColumnIdentifiers(colTitles);

        // read the Employee list
        EmployeeDB employeeDB = new EmployeeDB();
        try {
            ArrayList<Employee> records = employeeDB.getEmployeeList();
            // Formatter for salary
            DecimalFormat salaryFormat = new DecimalFormat("$#,##0.00");

            //DecimalFormat fmt2 = new DecimalFormat("0.0");
            for (int i = 0; i < records.size(); i++) {
                Employee employee = records.get(i);
                // Format Salary
                String formattedSalary = salaryFormat.format(employee.getSalary());

                Object[] row
                        = {
                            employee.getempID(), employee.getFirstName(), employee.getLastName(), employee.getEmail(), employee.getPhoneNumber(), employee.getHireDate(),
                            employee.getJobTitle(), employee.getDepartment(), formattedSalary, employee.getAccessLevel(), employee.getUsername(), employee.getPasswordHash()
                        };

                etblModel.addRow(row);
            }

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error. Database driver not found.", "Driver not found.", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database Error:" + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteEmployee() {
        // Get the value from the Employee ID field
        String value = txtEmployeeID.getText();

        // Check to see if the Employee ID field is blank
        if (value == null || value.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the Employee ID you wish to delete.");
        } else {
            try {
                EmployeeDB db = new EmployeeDB();

                // Check if the employee exists in the database
                boolean exists = db.checkEmployeeExists(value);
                if (!exists) {
                    JOptionPane.showMessageDialog(this, "Employee ID does not exist. Please check the ID and try again.");
                    return; // Exit method if employee does not exist
                }

                // Run the delete employee method in the EmployeeDB class
                db.deleteEmployee(value);
                JOptionPane.showMessageDialog(this, "Employee was successfully deleted.");

            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Error. Database driver not found.", "Driver not found.", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }

}
